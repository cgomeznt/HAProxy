#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    5s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

                stats enable
                stats uri /stats
                stats realm HAProxy\ Statistics
                stats auth admin:Venezuela21  #Coloca aquÃ­l usuario y clave que quieras

frontend http-in
    bind *:80

# Table definition
#stick-table type ip size 100k expire 30s store conn_cur
stick-table type ip size 1m expire 10s store gpc0,http_req_rate(5s),http_err_rate(10s),conn_cur

# Shut the new connection as long as the client has already 10 opened
tcp-request connection reject if { src_conn_cur ge 20 }
tcp-request connection track-sc1 src

# Limiting the HTTP request rate
# Use General Purpose Couter (gpc) 0 in SC1 as a global abuse counter
# Monitors the number of request sent by an IP over a period of 10 seconds
#stick-table type ip size 1m expire 10s store gpc0,http_req_rate(5s)
#tcp-request connection track-sc1 src
#tcp-request connection reject if { src_get_gpc0 gt 0 }

# Detecting vulnerability scans
# Use General Purpose Couter 0 in SC1 as a global abuse counter
# Monitors the number of errors generated by an IP over a period of 10 seconds
#stick-table type ip size 1m expire 10s store gpc0,http_err_rate(10s)
tcp-request connection track-sc1 src
tcp-request connection reject if { src_get_gpc0 gt 0 }


    acl sub1 hdr_sub(host) -i free.com
    acl sub2 hdr_sub(host) -i private.com
    acl sub3 hdr_sub(host) -i public.com

    use_backend web1_backend if sub1
    use_backend web2_backend if sub2
    use_backend web3_backend if sub3
#---------------------------------------------------------------------

backend web1_backend
    mode http
    option forwardfor

        # Limiting the HTTP request rate
        # If the source IP sent 10 or more http request over the defined period,
        # flag the IP as abuser on the frontend
        #acl abuse src_http_req_rate(http-in) ge 10
        #acl flag_abuser src_inc_gpc0(http-in)
        #tcp-request content reject if abuse flag_abuser

        # Detecting vulnerability scans
        # If the source IP generated 10 or more http request over the defined period,
        # flag the IP as abuser on the frontend
        acl abuse src_http_err_rate(http-in) ge 10
        acl flag_abuser src_inc_gpc0(http-in)

    #http-send-name-header Host
    http-request set-header Host free.com #if { srv_id 1 } # Este es el nombre del VHOST
    server web1_server 192.168.0.19:488


backend web2_backend
    mode http
    option forwardfor

    #http-send-name-header Host
    http-request set-header Host private.com #if { srv_id 1 } # Este es el nombre del VHOST
    server web2_server 192.168.0.19:488


backend web3_backend
    mode http
    option forwardfor

    #http-send-name-header Host
    http-request set-header Host public.com #if { srv_id 1 } # Este es el nombre del VHOST
    #server web3_server 192.168.0.19:488
    server web3_server 200.109.231.197:443 ssl verify none
